diff --git a/artiq/gateware/targets/efc.py b/artiq/gateware/targets/efc.py
index 385e05479..0e44928a8 100644
--- a/artiq/gateware/targets/efc.py
+++ b/artiq/gateware/targets/efc.py
@@ -18,8 +18,113 @@ from artiq.gateware.drtio.transceiver import eem_serdes
 from artiq.gateware.drtio.rx_synchronizer import NoRXSynchronizer
 from artiq.gateware.drtio import *
 from artiq.gateware.shuttler import Shuttler
+from artiq.gateware.targets.ltc2000 import LTC2000DDSModule
 from artiq.build_soc import *
 
+ltc2000_pads = [
+    ("ltc2000", 0,
+        Subsignal("clk_p", Pins("fmc0:LA07_P"), IOStandard("LVDS_25")),
+        Subsignal("clk_n", Pins("fmc0:LA07_N"), IOStandard("LVDS_25")),
+        Subsignal("dcko_p", Pins("fmc0:LA01_CC_P"), IOStandard("LVDS_25")),
+        Subsignal("dcko_n", Pins("fmc0:LA01_CC_N"), IOStandard("LVDS_25")),
+        Subsignal("data_p", Pins(
+            "fmc0:LA15_P fmc0:LA16_P fmc0:LA14_P",
+            "fmc0:LA13_P fmc0:LA11_P fmc0:LA12_P",
+            "fmc0:LA09_P fmc0:LA10_P fmc0:LA08_P",
+            "fmc0:LA05_P fmc0:LA04_P fmc0:LA06_P",
+            "fmc0:LA03_P fmc0:LA02_P fmc0:LA00_CC_P",
+            "C18"), #H4, externally terminated on EFC, it's called fmc_clk_m2c !!!MAY NEED TO REMOVE R24 of FMC BOARD!!!
+            IOStandard("LVDS_25")),
+        Subsignal("data_n", Pins(
+            "fmc0:LA15_N fmc0:LA16_N fmc0:LA14_N",
+            "fmc0:LA13_N fmc0:LA11_N fmc0:LA12_N",
+            "fmc0:LA09_N fmc0:LA10_N fmc0:LA08_N",
+            "fmc0:LA05_N fmc0:LA04_N fmc0:LA06_N",
+            "fmc0:LA03_N fmc0:LA02_N fmc0:LA00_CC_N",
+            "C19"), #H5, externally terminated on EFC, it's called fmc_clk_m2c !!!MAY NEED TO REMOVE R24 of FMC BOARD!!!
+            IOStandard("LVDS_25")),
+        Subsignal("datb_p", Pins(
+            "fmc0:LA32_P fmc0:LA33_P fmc0:LA30_P",
+            "fmc0:LA31_P fmc0:LA28_P fmc0:LA29_P",
+            "fmc0:LA24_P fmc0:LA25_P fmc0:LA26_P",
+            "fmc0:LA27_P fmc0:LA21_P fmc0:LA22_P",
+            "fmc0:LA23_P fmc0:LA19_P fmc0:LA20_P",
+            "fmc0:LA17_CC_P"),
+            IOStandard("LVDS_25")),
+        Subsignal("datb_n", Pins(
+            "fmc0:LA32_N fmc0:LA33_N fmc0:LA30_N",
+            "fmc0:LA31_N fmc0:LA28_N fmc0:LA29_N",
+            "fmc0:LA24_N fmc0:LA25_N fmc0:LA26_N",
+            "fmc0:LA27_N fmc0:LA21_N fmc0:LA22_N",
+            "fmc0:LA23_N fmc0:LA19_N fmc0:LA20_N",
+            "fmc0:LA17_CC_N"),
+            IOStandard("LVDS_25"))
+    )
+]
+
+ltc2000_spi = [
+    ("ltc2000_spi", 0,
+        Subsignal("cs_n", Pins("fmc0:HA21_N"), IOStandard("LVCMOS25")),
+        Subsignal("clk", Pins("fmc0:HA17_CC_P"), IOStandard("LVCMOS25")),
+        Subsignal("mosi", Pins("fmc0:HA17_CC_N"), IOStandard("LVCMOS25")),
+        Subsignal("miso", Pins("fmc0:HA21_P"), IOStandard("LVCMOS25"), Misc("PULLUP=TRUE"))
+    )
+]
+
+shuttler_io = [
+    ('dac_spi', 0,
+        Subsignal('clk', Pins('fmc0:HB16_N')),
+        Subsignal('mosi', Pins('fmc0:HB06_CC_N')),
+        Subsignal('cs_n', Pins('fmc0:LA31_N fmc0:LA31_P fmc0:HB19_P fmc0:LA30_P')),
+        IOStandard("LVCMOS18")),
+    ('dac_rst', 0, Pins('fmc0:HB16_P'), IOStandard("LVCMOS18")),
+    ('dac_din', 0,
+        Subsignal('data', Pins('fmc0:HA06_N fmc0:HA06_P fmc0:HA07_N fmc0:HA02_N fmc0:HA07_P fmc0:HA02_P fmc0:HA03_N fmc0:HA03_P fmc0:HA04_N fmc0:HA04_P fmc0:HA05_N fmc0:HA05_P fmc0:HA00_CC_N fmc0:HA01_CC_N')),
+        Subsignal('clk', Pins('fmc0:HA00_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 1,
+        Subsignal('data', Pins('fmc0:LA09_P fmc0:LA09_N fmc0:LA07_N fmc0:LA08_N fmc0:LA07_P fmc0:LA08_P fmc0:LA05_N fmc0:LA04_N fmc0:LA05_P fmc0:LA06_N fmc0:LA04_P fmc0:LA03_N fmc0:LA03_P fmc0:LA06_P')),
+        Subsignal('clk', Pins('fmc0:LA00_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 2,
+        Subsignal('data', Pins('fmc0:HA14_N fmc0:HA14_P fmc0:HA12_N fmc0:HA12_P fmc0:HA13_N fmc0:HA10_N fmc0:HA10_P fmc0:HA11_N fmc0:HA11_P fmc0:HA13_P fmc0:HA08_N fmc0:HA08_P fmc0:HA09_N fmc0:HA09_P')),
+        Subsignal('clk', Pins('fmc0:HA01_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 3,
+        Subsignal('data', Pins('fmc0:LA14_N fmc0:LA15_N fmc0:LA16_N fmc0:LA15_P fmc0:LA14_P fmc0:LA13_N fmc0:LA16_P fmc0:LA13_P fmc0:LA11_N fmc0:LA12_N fmc0:LA11_P fmc0:LA12_P fmc0:LA10_N fmc0:LA10_P')),
+        Subsignal('clk', Pins('fmc0:LA01_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 4,
+        Subsignal('data', Pins('fmc0:HA22_N fmc0:HA19_N fmc0:HA22_P fmc0:HA21_N fmc0:HA21_P fmc0:HA19_P fmc0:HA18_CC_N fmc0:HA20_N fmc0:HA20_P fmc0:HA18_CC_P fmc0:HA15_N fmc0:HA15_P fmc0:HA16_N fmc0:HA16_P')),
+        Subsignal('clk', Pins('fmc0:HA17_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 5,
+        Subsignal('data', Pins('fmc0:LA24_N fmc0:LA25_N fmc0:LA24_P fmc0:LA25_P fmc0:LA21_N fmc0:LA21_P fmc0:LA22_N fmc0:LA22_P fmc0:LA23_N fmc0:LA23_P fmc0:LA19_N fmc0:LA19_P fmc0:LA20_N fmc0:LA20_P')),
+        Subsignal('clk', Pins('fmc0:LA17_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 6,
+        Subsignal('data', Pins('fmc0:HB08_N fmc0:HB08_P fmc0:HB07_N fmc0:HB07_P fmc0:HB04_N fmc0:HB04_P fmc0:HB01_N fmc0:HB05_N fmc0:HB01_P fmc0:HB05_P fmc0:HB02_N fmc0:HB02_P fmc0:HB03_N fmc0:HB03_P')),
+        Subsignal('clk', Pins('fmc0:HB00_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('dac_din', 7,
+        Subsignal('data', Pins('fmc0:HB13_N fmc0:HB12_N fmc0:HB13_P fmc0:HB12_P fmc0:HB15_N fmc0:HB15_P fmc0:HB11_N fmc0:HB09_N fmc0:HB09_P fmc0:HB14_N fmc0:HB14_P fmc0:HB10_N fmc0:HB10_P fmc0:HB11_P')),
+        Subsignal('clk', Pins('fmc0:HB06_CC_P')),
+        IOStandard('LVCMOS18')),
+    ('afe_ctrl_dir', 0, Pins('fmc0:LA26_N fmc0:HB00_CC_N fmc0:HB17_CC_P'), IOStandard("LVCMOS18")),
+    ('afe_ctrl_oe_n', 0, Pins('fmc0:HB19_N'), IOStandard("LVCMOS18")),
+    ('afe_relay', 0,
+        Subsignal('clk', Pins('fmc0:LA02_N')),
+        Subsignal('mosi', Pins('fmc0:LA00_CC_N')),
+        Subsignal('cs_n', Pins('fmc0:LA02_P fmc0:LA01_CC_N')),
+        IOStandard("LVCMOS18")),
+    ('afe_adc_spi', 0,
+        Subsignal('clk', Pins('fmc0:LA29_P')),
+        Subsignal('mosi', Pins('fmc0:LA29_N')),
+        Subsignal('miso', Pins('fmc0:LA30_N')),
+        Subsignal('cs_n', Pins('fmc0:LA28_P')),
+        IOStandard("LVCMOS18")),
+    ('afe_adc_error_n', 0, Pins('fmc0:LA28_N'), IOStandard("LVCMOS18")),
+]
 
 class Satellite(BaseSoC, AMPSoC):
     mem_map = {
@@ -29,14 +134,15 @@ class Satellite(BaseSoC, AMPSoC):
     }
     mem_map.update(BaseSoC.mem_map)
 
-    def __init__(self, gateware_identifier_str=None, hw_rev="v1.1", **kwargs):
+    def __init__(self, gateware_identifier_str=None, hw_rev="v1.1", rtio_clk_freq=125e6, variant="shuttler",  **kwargs):
+        print(rtio_clk_freq)
         BaseSoC.__init__(self,
                  cpu_type="vexriscv",
                  hw_rev=hw_rev,
                  cpu_bus_width=64,
                  sdram_controller_type="minicon",
                  l2_size=128*1024,
-                 clk_freq=125e6,
+                 clk_freq=rtio_clk_freq,
                  **kwargs)
         AMPSoC.__init__(self)
         add_identifier(self, gateware_identifier_str=gateware_identifier_str)
@@ -107,101 +213,99 @@ class Satellite(BaseSoC, AMPSoC):
         fix_serdes_timing_path(platform)
 
         self.config["DRTIO_ROLE"] = "satellite"
-        self.config["RTIO_FREQUENCY"] = "125.0"
-
-        shuttler_io = [            
-            ('dac_spi', 0,
-                Subsignal('clk', Pins('fmc0:HB16_N')),
-                Subsignal('mosi', Pins('fmc0:HB06_CC_N')),
-                Subsignal('cs_n', Pins('fmc0:LA31_N fmc0:LA31_P fmc0:HB19_P fmc0:LA30_P')),
-                IOStandard("LVCMOS18")),
-            ('dac_rst', 0, Pins('fmc0:HB16_P'), IOStandard("LVCMOS18")),
-            ('dac_din', 0,
-                Subsignal('data', Pins('fmc0:HA06_N fmc0:HA06_P fmc0:HA07_N fmc0:HA02_N fmc0:HA07_P fmc0:HA02_P fmc0:HA03_N fmc0:HA03_P fmc0:HA04_N fmc0:HA04_P fmc0:HA05_N fmc0:HA05_P fmc0:HA00_CC_N fmc0:HA01_CC_N')),
-                Subsignal('clk', Pins('fmc0:HA00_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 1,
-                Subsignal('data', Pins('fmc0:LA09_P fmc0:LA09_N fmc0:LA07_N fmc0:LA08_N fmc0:LA07_P fmc0:LA08_P fmc0:LA05_N fmc0:LA04_N fmc0:LA05_P fmc0:LA06_N fmc0:LA04_P fmc0:LA03_N fmc0:LA03_P fmc0:LA06_P')),
-                Subsignal('clk', Pins('fmc0:LA00_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 2,
-                Subsignal('data', Pins('fmc0:HA14_N fmc0:HA14_P fmc0:HA12_N fmc0:HA12_P fmc0:HA13_N fmc0:HA10_N fmc0:HA10_P fmc0:HA11_N fmc0:HA11_P fmc0:HA13_P fmc0:HA08_N fmc0:HA08_P fmc0:HA09_N fmc0:HA09_P')),
-                Subsignal('clk', Pins('fmc0:HA01_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 3,
-                Subsignal('data', Pins('fmc0:LA14_N fmc0:LA15_N fmc0:LA16_N fmc0:LA15_P fmc0:LA14_P fmc0:LA13_N fmc0:LA16_P fmc0:LA13_P fmc0:LA11_N fmc0:LA12_N fmc0:LA11_P fmc0:LA12_P fmc0:LA10_N fmc0:LA10_P')),
-                Subsignal('clk', Pins('fmc0:LA01_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 4,
-                Subsignal('data', Pins('fmc0:HA22_N fmc0:HA19_N fmc0:HA22_P fmc0:HA21_N fmc0:HA21_P fmc0:HA19_P fmc0:HA18_CC_N fmc0:HA20_N fmc0:HA20_P fmc0:HA18_CC_P fmc0:HA15_N fmc0:HA15_P fmc0:HA16_N fmc0:HA16_P')),
-                Subsignal('clk', Pins('fmc0:HA17_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 5,
-                Subsignal('data', Pins('fmc0:LA24_N fmc0:LA25_N fmc0:LA24_P fmc0:LA25_P fmc0:LA21_N fmc0:LA21_P fmc0:LA22_N fmc0:LA22_P fmc0:LA23_N fmc0:LA23_P fmc0:LA19_N fmc0:LA19_P fmc0:LA20_N fmc0:LA20_P')),
-                Subsignal('clk', Pins('fmc0:LA17_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 6,
-                Subsignal('data', Pins('fmc0:HB08_N fmc0:HB08_P fmc0:HB07_N fmc0:HB07_P fmc0:HB04_N fmc0:HB04_P fmc0:HB01_N fmc0:HB05_N fmc0:HB01_P fmc0:HB05_P fmc0:HB02_N fmc0:HB02_P fmc0:HB03_N fmc0:HB03_P')),
-                Subsignal('clk', Pins('fmc0:HB00_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('dac_din', 7,
-                Subsignal('data', Pins('fmc0:HB13_N fmc0:HB12_N fmc0:HB13_P fmc0:HB12_P fmc0:HB15_N fmc0:HB15_P fmc0:HB11_N fmc0:HB09_N fmc0:HB09_P fmc0:HB14_N fmc0:HB14_P fmc0:HB10_N fmc0:HB10_P fmc0:HB11_P')),
-                Subsignal('clk', Pins('fmc0:HB06_CC_P')),
-                IOStandard('LVCMOS18')),
-            ('afe_ctrl_dir', 0, Pins('fmc0:LA26_N fmc0:HB00_CC_N fmc0:HB17_CC_P'), IOStandard("LVCMOS18")),
-            ('afe_ctrl_oe_n', 0, Pins('fmc0:HB19_N'), IOStandard("LVCMOS18")),
-            ('afe_relay', 0,
-                Subsignal('clk', Pins('fmc0:LA02_N')),
-                Subsignal('mosi', Pins('fmc0:LA00_CC_N')),
-                Subsignal('cs_n', Pins('fmc0:LA02_P fmc0:LA01_CC_N')),
-                IOStandard("LVCMOS18")),
-            ('afe_adc_spi', 0,
-                Subsignal('clk', Pins('fmc0:LA29_P')),
-                Subsignal('mosi', Pins('fmc0:LA29_N')),
-                Subsignal('miso', Pins('fmc0:LA30_N')),
-                Subsignal('cs_n', Pins('fmc0:LA28_P')),
-                IOStandard("LVCMOS18")),
-            ('afe_adc_error_n', 0, Pins('fmc0:LA28_N'), IOStandard("LVCMOS18")),
-        ]
+        self.config["RTIO_FREQUENCY"] = str(rtio_clk_freq/1e6)
 
-        platform.add_extension(shuttler_io)
+        if(variant == "shuttler"):
+            platform.add_extension(shuttler_io)
 
-        self.submodules.converter_spi = spi2.SPIMaster(spi2.SPIInterface(self.platform.request("dac_spi", 0)))
-        self.csr_devices.append("converter_spi")
-        self.config["HAS_CONVERTER_SPI"] = None
+            self.submodules.converter_spi = spi2.SPIMaster(spi2.SPIInterface(self.platform.request("dac_spi", 0)))
+            self.csr_devices.append("converter_spi")
+            self.config["HAS_CONVERTER_SPI"] = None
 
-        self.submodules.dac_rst = gpio.GPIOOut(self.platform.request("dac_rst"))
-        self.csr_devices.append("dac_rst")
+            self.submodules.dac_rst = gpio.GPIOOut(self.platform.request("dac_rst"))
+            self.csr_devices.append("dac_rst")
 
         self.rtio_channels = []
 
         for i in range(2):
             phy = ttl_simple.Output(self.virtual_leds.get(i))
             self.submodules += phy
+            print("VIRTUAL LED at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
             self.rtio_channels.append(rtio.Channel.from_phy(phy))
 
-        self.submodules.shuttler = Shuttler([platform.request("dac_din", i) for i in range(8)])
-        self.csr_devices.append("shuttler")
-        self.rtio_channels.extend(rtio.Channel.from_phy(phy) for phy in self.shuttler.phys)
+        if(variant == "shuttler"):
+            self.submodules.shuttler = Shuttler([platform.request("dac_din", i) for i in range(8)])
+            self.csr_devices.append("shuttler")
+            self.rtio_channels.extend(rtio.Channel.from_phy(phy) for phy in self.shuttler.phys)
+
+            afe_dir = platform.request("afe_ctrl_dir")
+            self.comb += afe_dir.eq(0b011)
+
+            afe_oe = platform.request("afe_ctrl_oe_n")
+            self.comb += afe_oe.eq(0)
+
+            relay_led_phy = rtio_spi.SPIMaster(self.platform.request("afe_relay"))
+            self.submodules += relay_led_phy
+            print("SHUTTLER RELAY at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
+            self.rtio_channels.append(rtio.Channel.from_phy(relay_led_phy))
+
+            adc_error_n = platform.request("afe_adc_error_n")
+            self.comb += adc_error_n.eq(1)
+
+            adc_spi = rtio_spi.SPIMaster(self.platform.request("afe_adc_spi"))
+            self.submodules += adc_spi
+            print("SHUTTLER ADC at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
+            self.rtio_channels.append(rtio.Channel.from_phy(adc_spi))
+
+        if(variant == "ltc"):
+            # LTC2000 and DDS submodule
+            self.submodules.ltc2000_dds = LTC2000DDSModule(self.platform, ltc2000_pads)
+            self.csr_devices.append("ltc2000_dds")
 
-        afe_dir = platform.request("afe_ctrl_dir")
-        self.comb += afe_dir.eq(0b011)
+            # SPI setup
+            platform.add_extension(ltc2000_spi)
+            #dac_spi = platform.request("ltc2000_spi", 0)
+            #phy = spi2.SPIMaster(dac_spi)
+            phy = rtio_spi.SPIMaster(self.platform.request("ltc2000_spi", 0))
+            self.submodules += phy
+            print("LTC2000 DAC SPI at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
+            self.rtio_channels.append(rtio.Channel.from_phy(phy, ififo_depth=4))
+
+            # Add RTIO channel for LTC2000
+            print("LTC2000 DAC at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
+            self.rtio_channels.append(rtio.Channel.from_phy(self.ltc2000_dds))
+
+            self.clock_domains.cd_sys2x = ClockDomain(reset_less=True)
+            self.clock_domains.cd_sys6x = ClockDomain(reset_less=True)
+
+            mmcm_fb_in = Signal()
+            mmcm_fb_out = Signal()
+            mmcm_sys2x = Signal()
+            mmcm_sys6x = Signal()
+            self.specials += [
+                Instance("MMCME2_BASE",
+                    p_CLKIN1_PERIOD=10.0,
+                    i_CLKIN1=ClockSignal(),
 
-        afe_oe = platform.request("afe_ctrl_oe_n")
-        self.comb += afe_oe.eq(0)
+                    i_RST=ResetSignal(),
 
-        relay_led_phy = rtio_spi.SPIMaster(self.platform.request("afe_relay"))
-        self.submodules += relay_led_phy
-        print("SHUTTLER RELAY at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
-        self.rtio_channels.append(rtio.Channel.from_phy(relay_led_phy))
+                    i_CLKFBIN=mmcm_fb_in,
+                    o_CLKFBOUT=mmcm_fb_out,
+                    #o_LOCKED=,
 
-        adc_error_n = platform.request("afe_adc_error_n")
-        self.comb += adc_error_n.eq(1)
+                    # VCO @ 1.2GHz with MULT=12
+                    p_CLKFBOUT_MULT_F=12, p_DIVCLK_DIVIDE=1,
 
-        adc_spi = rtio_spi.SPIMaster(self.platform.request("afe_adc_spi"))
-        self.submodules += adc_spi
-        print("SHUTTLER ADC at RTIO channel 0x{:06x}".format(len(self.rtio_channels)))
-        self.rtio_channels.append(rtio.Channel.from_phy(adc_spi))
+                    # 200MHz
+                    p_CLKOUT0_DIVIDE_F=6, p_CLKOUT0_PHASE=0.0, o_CLKOUT0=mmcm_sys2x,
+
+                    # 600MHz
+                    p_CLKOUT1_DIVIDE=2, p_CLKOUT1_PHASE=0.0, o_CLKOUT1=mmcm_sys6x,
+                ),
+                Instance("BUFG", i_I=mmcm_sys2x, o_O=self.cd_sys2x.clk),
+                Instance("BUFG", i_I=mmcm_sys6x, o_O=self.cd_sys6x.clk),
+                Instance("BUFG", i_I=mmcm_fb_out, o_O=mmcm_fb_in)
+            ]
 
         self.config["HAS_RTIO_LOG"] = None
         self.config["RTIO_LOG_CHANNEL"] = len(self.rtio_channels)
@@ -217,7 +321,7 @@ class Satellite(BaseSoC, AMPSoC):
 
         # satellite (master-controlled) RTIO
         self.submodules.local_io = SyncRTIO(self.rtio_tsc, rtio_channels, lane_count=sed_lanes)
-        self.comb += [ 
+        self.comb += [
             self.drtiosat.async_errors.eq(self.local_io.async_errors),
             self.local_io.sed_spread_enable.eq(self.drtiosat.sed_spread_enable.storage)
         ]
@@ -240,26 +344,29 @@ class Satellite(BaseSoC, AMPSoC):
                                                 self.get_native_sdram_if(), cpu_dw=self.cpu_dw)
         self.csr_devices.append("rtio_analyzer")
 
-
 def main():
     parser = argparse.ArgumentParser(
         description="ARTIQ device binary builder for EEM FMC Carrier systems")
     builder_args(parser)
     parser.set_defaults(output_dir="artiq_efc")
     parser.add_argument("-V", "--variant", default="shuttler")
-    parser.add_argument("--hw-rev", choices=["v1.0", "v1.1"], default="v1.1", 
+    parser.add_argument("--hw-rev", choices=["v1.0", "v1.1"], default="v1.1",
                         help="Hardware revision")
     parser.add_argument("--gateware-identifier-str", default=None,
                         help="Override ROM identifier")
+    parser.add_argument("--drtio100mhz", action="store_true",
+                        help="Set RTIO clock frequency to 100 MHz (default is 125 MHz)")
     args = parser.parse_args()
 
     argdict = dict()
     argdict["gateware_identifier_str"] = args.gateware_identifier_str
     argdict["hw_rev"] = args.hw_rev
+    argdict["rtio_clk_freq"] = 100e6 if args.drtio100mhz else 125e6
+    argdict["variant"] = args.variant.lower()
 
+    print(argdict)
     soc = Satellite(**argdict)
     build_artiq_soc(soc, builder_argdict(args))
 
-
 if __name__ == "__main__":
     main()
